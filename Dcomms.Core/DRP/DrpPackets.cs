using System;
using System.Collections.Generic;
using System.Net;
using System.Text;

namespace Dcomms.DRP
{
    /// <summary>
    /// A = requester
    /// RP = rendezvous server, proxy peer
    /// is sent from A to RP when A connects to the P2P network
    /// protects system against IP spoofing
    /// </summary>
    class RegisterPowRequestPacket
    {        
        uint timestamp;
        byte[] ProofOfWork0;    // sha256(timestamp|requesterPublicIp|ProofOfWork0) has byte[6]=7  // includes powType //todo: consider argon2-based PoW
    }
    /// <summary>
    /// verifies UDP/IP path from RP to A, check UDP.sourceIP
    /// can be used for UDP reflection attacks
    /// </summary>
    class RegisterPowResponsePacket
    {
        RegisterPowResponseStatusCode StatusCode;
        byte[] RequestID;// =ProofOfWork1 challenge for A  // generated by RP
    }
    enum RegisterPowResponseStatusCode
    {
        succeeded_StatefulCpuPowChallenge,
        rejected,
        rejected_badtimestamp
    }

    /// <summary>
    /// is sent from A to RP
    /// </summary>
    class RegisterSynPacket
    {
        // "initial SYN" part
        byte[] RequesterPublicKey; // used to verify signature
        uint MinimalDistanceToNeighbor; // is set to non-zero when requester wants to expand neighborhood
        byte[] RequestId;
        byte[] ProofOfWork1; //  sha256(RequesterPublicKey|RequestID|ProofOfWork1) has byte[6]=7  // includes powType //todo: argon2 cpuPoW

        byte[] RequesterSignature; // is verified by RP
        byte NumberOfHops; // max 10, is limited by RP
    }

    /// <summary>
    /// is sent from RP to M, from M to N
    /// is sent over established P2P UDP channels that are kept alive by pings.  sender proxy is authenticated by source IP:UDP port, and it can be spoofed
    /// </summary>
    class RegisterProxiedSynPacket
    {
        byte[] RequesterPublicKey; // used to verify signature      
        byte[] RequestId;
        byte[] RequesterSignature; // is verified by RP,M,N
        byte NumberOfHopsRemaining; // is decremented by proxies

        /// <summary>
        /// optional, is set when next hop requires the signature (in case when next hop suspects IP-spoofed attack)
        /// подпись последнего прокси-отправителя RP,M,X 
        /// </summary>
        byte[] ProxySenderSignature;
    }

    /// <summary>
    /// is sent from N to M, from M to RP, from RP to A
    /// response with status=proxied is sent immediately
    /// ответ от RP к A идет по тому же пути, узлы помнят обратный путь по RequestId
    /// </summary>
    class RegisterSynAckPacket
    {
        DrpStatusCode StatusCode;
        /// <summary>
        /// not null only for (status=connecting) (N->X-M-RP-A)
        /// IP address of N, encrypted for A
        /// </summary>
        byte[] NeighborEndpoint_EncryptedByRequesterPublicKey; 

        // "initial SYN" part,   copied from request
    //????    byte[] RegPubA; // used to verify signature
        byte[] RequestId;
        //????     byte[] RegSignA;

        // "ACK" part:
        byte[] NeighborPublicKey; // pub key of RP, M, N
                        //// ???     byte[] NonceN; // not needed: already enough of salt
        IPEndPoint endpointA; // is sent only from RP to A to provide public IP:port
        byte[] RegSignN; // весь пакет //=cpuPoWn   
        // нужно ли подписывать proxied-- пакеты?
    }

    /// <summary>
    /// is sent from A to N with encrypted IP address of A
    /// A->RP->M->N
    /// пиры помнят путь по RequestID  пиры уже авторизовали друг друга на этом этапе
    /// </summary>
    class RegisterAckPacket
    {
        byte[] RegPubA;
        byte[] RequestID;
        byte[] EndointA_encryptedByPubN; // IP address: UDP port
        byte[] RegSignA; // is verified by RP,M,N

        byte[] RegPubSender; // = RP,M,X  sender=тот, кто проксирует
        byte[] RegSignSender; //подпись последнего отправителя // весь пакет
    }

    /// <summary>
    /// is sent by A when it receives signed ping from N
    /// A->RP->M
    /// пиры помнят путь по messageid=CpuPoWa
    /// пиры уже авторизовали друг друга на этом этапе
    /// пиры финализуруют состояние, обновляют рейтинг (всех по цепочке)
    /// </summary>
    class RegisterConfirmedPacket
    {
        byte[] RegPubA;
        byte[] RequestID;
        byte succeeded; // 1 bit, to make the signature different from initial "SYN" part
        byte[] RegSignA; // is verified by RP,M,N 

        byte[] RegPubSender; // = RP,M,X  sender=тот, кто проксирует
        byte[] RegSignSender; //подпись последнего отправителя // весь пакет
    }

    enum DrpStatusCode
    {
        proxied, // is sent to previous hop immediately when packet is proxied, to avoid retransmissions
        confirmed,
        requireSignature,

        rejected, // no neighbors
        rejected_badtimestamp,
        rejected_maxhopsReached
    }
    class PingPacket
    {
        byte flags; // bit0 = "bad time"   // attack on neighbor: fake "bad time": max time sync per minute
        uint timestamp; // against replay: receiver checks timestamp
                        //// Alexey: not needed  byte[] nonceA; // ?? with ed25519 not needed???  
        
        byte[] regSignA;
    ////////////    byte[] cpuPoWa;//??????????
    }
    /// <summary>
    /// A->N->X->B1
    /// </summary>
    class InviteRequestPacket
    {
        byte[] RequestID; // set by A
        byte[] DirectChannelEndointA_encryptedByRegPubB; // with nonce(???) can be decrypted only by B
        byte[] RegPubA;
        byte[] RegPubB;
        uint timestamp;
        byte[] RegSignA;

        byte hopsRemaining;

        byte[] RegPubSender; // = RP,M,X  sender=тот, кто проксирует
        byte[] RegSignSender; //подпись последнего отправителя // весь пакет
    }
    /// <summary>
    /// N->A (proxied)
    /// B1->X->N->A (rejected/confirmed)
    /// </summary>
    class InviteResponsePacket
    {
        byte[] RequestID;
        DrpStatusCode StatusCode;
        byte[] DirectChannelEndointB_encryptedByRegPubA; // with nonce(???) can be decrypted only by A
       //??? byte[] RegPubA;
      //???  byte[] RegPubB;
        uint timestamp;
        byte[] RegSignB;
    }
}
