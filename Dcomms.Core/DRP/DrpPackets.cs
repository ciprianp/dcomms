using System;
using System.Collections.Generic;
using System.Net;
using System.Text;

namespace Dcomms.DRP
{
    /// <summary>
    /// is sent from A to RP when A connects to the P2P network
    /// protects system against IP spoofing
    /// </summary>
    class RegisterPowRequestPacket
    {        
        uint timestamp;
        byte[] StatelessCpuPoWa;    // sha256(timestamp|publicIpA|StatelessCpuPoWa) has byte[6]=7  // includes powType //todo: argon2 cpuPoW
    }
    /// <summary>
    /// verifies UDP/IP path from RP to A, check UDP.sourceIP
    /// can be used for UDP reflection attacks
    /// </summary>
    class RegisterPowResponsePacket
    {
        RegisterPowResponseStatusCode StatusCode;
        byte[] StatefulCpuPowChallenge;// =messageID // generated by RP
    }
    enum RegisterPowResponseStatusCode
    {
        succeeded_StatefulCpuPowChallenge,
        rejected,
        rejected_badtimestamp
    }

    /// <summary>
    /// is sent from A to RP
    /// A = original requester
    /// </summary>
    class RegisterSynPacket
    {
        // "initial SYN" part
        byte[] RegPubA; // used to verify signature
        uint timestamp;
        byte[] StatefulCpuPowChallenge;// =messageID 
        byte[] StatefulCpuPoWa; //  sha256(RegPubA|timestamp|StatefulCpuPowChallenge|StatefulCpuPoWa) has byte[6]=7  // includes powType //todo: argon2 cpuPoW

        byte[] RegSignA; // is verified by RP
        byte HopsRemaining;// max 10

        byte[][] ExceptTheseNeighbors; // sent to N to get new neighbors
        byte[] ExceptTheseNeighbors_RegSignA; // is verified by N // (except N,Y,Z)
    }

    /// <summary>
    /// is sent from RP to M, from M to N
    /// A = original requester
    /// </summary>
    class RegisterProxiedSynPacket
    {
        // "initial SYN" part
        byte[] RegPubA; // used to verify signature
        uint timestamp;
        byte[] StatefulCpuPowChallenge;// =messageID 
        byte[] StatefulCpuPoWa;

        byte[] RegSignA; // часть SYN // is verified by RP,M,N
        byte HopsRemaining; // decremented

        byte[] RegPubSender; // = RP,M,X  sender=тот, кто проксирует
        byte[] RegSignSender; //подпись последнего отправителя // весь пакет
    }

    /// <summary>
    /// is sent from N to M, from M to RP, from RP to A
    /// response with status=proxied is sent immediately
    /// ответ от RP к A идет по тому же пути, узлы помнят обратный путь по messageId
    /// </summary>
    class RegisterSynAckPacket
    {
        DrpStatusCode StatusCode;
        // not null only for (status=connecting) (N->X-M-RP-A)
        byte[] NeighborEndpoint_encryptedByRegPubA; // IP address of N, encrypted for A

        // "initial SYN" part,   copied from request
        byte[] RegPubA; // used to verify signature
        uint timestamp;
        byte[] StatefulCpuPowChallenge;// =messageID 
        byte[] StatefulCpuPoWa;

        // ACK part:
        byte[] RegPubN; // pub key of RP, Mm N
                        //// ???     byte[] NonceN; // not needed: already enough of salt
        IPEndPoint endpointA; // is sent from RP to A only
        byte[] RegSignN; // весь пакет //=cpuPoWn        
    }

    /// <summary>
    /// is sent from A to N with encrypted IP address of A
    /// A->RP->M->N
    /// пиры помнят путь по messageid=CpuPoWa  пиры уже авторизовали друг друга на этом этапе
    /// </summary>
    class RegisterAckPacket
    {
        // syn part:
        byte[] RegPubA;
        uint timestamp;
        byte[] CpuPoWa; // =nonceA=messageID

        byte[] EndointA_encryptedByPubN; // IP address: UDP port
        byte[] RegSignA; // is verified by RP,M,N
    }

    /// <summary>
    /// is sent by A when it receives signed ping from N
    /// A->RP->M
    /// пиры помнят путь по messageid=CpuPoWa
    /// пиры уже авторизовали друг друга на этом этапе
    /// пиры финализуруют состояние, обновляют рейтинг (всех по цепочке)
    /// </summary>
    class RegisterConfirmedPacket
    {
        // confirmedSYN part
        byte[] RegPubA;
        uint timestamp;
        byte[] CpuPoWa; // =nonceA=messageID
        byte succeeded; // 1 bit, to make the signature different from initial "SYN" part

        byte[] RegSignA; // is verified by RP,M,N 
    }

    enum DrpStatusCode
    {
        proxied, // is sent to previous hop immediately when packet is proxied, to avoid retransmissions
        connecting,
        
        rejected, // no neighbors
        rejected_badtimestamp,
        rejected_maxhopsReached
    }
    class PingPacket
    {
        byte flags; // bit0 = "bad time"   // attack on neighbor: fake "bad time": max time sync per minute
        uint timestamp; // against replay: receiver checks timestamp
                        //// Alexey: not needed  byte[] nonceA; // ?? with ed25519 not needed???  
        
        byte[] regSignA;
    ////////////    byte[] cpuPoWa;//??????????
    }
    class InviteRequestPacket
    {
        byte[] DirectChannelEndointA_encryptedByRegPubB; // with nonce; can be decrypted only by B
        byte[] RegPubA;
        byte[] RegPubB;
        uint timestamp;
        byte[] RegSignA;
        byte powType; // 2 bits
        byte[] CpuPoWa; // =nonceA=messageID
        byte hopsRemaining;
    }
    class InviteResponsePacket
    {
        DrpStatusCode StatusCode;
        byte[] DirectChannelEndointB_encryptedByRegPubA; // with nonce; can be decrypted only by A
        byte[] RegPubA;
        byte[] RegPubB;
        uint timestamp;
        byte[] RegSignB;
        byte[] CpuPoWa; // =nonceA=messageID
    }
}
