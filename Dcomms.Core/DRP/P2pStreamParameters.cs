using Dcomms.Cryptography;
using Dcomms.DRP.Packets;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;

namespace Dcomms.DRP
{

    /// <summary>
    /// is generated by remote peer; token of local peer at remote peer;
    /// put into every p2p packet,
    /// is needed  1) for faster lookup of remote peer by first 16 of 32 bits 2) to have multiple DRP peer reg IDs running at same UDP port
    /// is unique at remote (responder) peer; is used to identify local (sender) peer at remote peer (together with HMAC)
    /// </summary>
    public class P2pConnectionToken32
    {
        public uint Token32;
        public ushort Token16 => (ushort)(Token32 & 0x0000FFFF);
        public void Encode(BinaryWriter writer)
        {
            writer.Write(Token32);
        }
        public static P2pConnectionToken32 Decode(BinaryReader reader)
        {
            var r = new P2pConnectionToken32();
            r.Token32 = reader.ReadUInt32();
            return r;
        }
        public override bool Equals(object obj)
        {
            return ((P2pConnectionToken32)obj).Token32 == this.Token32;
        }
    }

    /// <summary>
    /// parameters to transmit DRP pings and proxied packets between registered neighbors:
    /// from local peer to remote peer (txParamaters)
    /// from remote peer to local peer (rxParamaters)
    /// is negotiated via REGISTER channel
    /// all fields are encrypted when transmitted over REGISTER channel, using single-block AES and shared ECDH key
    /// </summary>
    public class P2pStreamParameters
    {
        public P2pConnectionToken32 RemotePeerToken32;
        public IPEndPoint RemoteEndpoint; // IP address + UDP port // where to send packets
        byte[] SharedDhSecret;
        
        public static P2pStreamParameters DecryptAtRegisterRequester(byte[] localPrivateEcdhKey, RegisterSynPacket localRegisterSyn,
            RegisterSynAckPacket remoteRegisterSynAck, ICryptoLibrary cryptoLibrary)
        {
            if ((remoteRegisterSynAck.Flags & RegisterSynAckPacket.Flag_ipv6) != 0) throw new NotImplementedException();

            var r = new P2pStreamParameters();

            r.SharedDhSecret = cryptoLibrary.DeriveEcdh25519SharedSecret(localPrivateEcdhKey, remoteRegisterSynAck.NeighborEcdhePublicKey.ecdh25519PublicKey);

            var ms = new MemoryStream();      
            using (var writer = new BinaryWriter(ms))
            {
                localRegisterSyn.GetCommonRequesterAndResponderFields(writer, true);
                remoteRegisterSynAck.GetCommonRequesterAndResponderFields(writer, false, false);
            }
            var iv = cryptoLibrary.GetHashSHA256(ms.ToArray());

            ms.Write(r.SharedDhSecret, 0, r.SharedDhSecret.Length);
            var aesKey = cryptoLibrary.GetHashSHA256(ms.ToArray()); // here SHA256 is used as KDF, together with common fields from packets, including both ECDH public keys and timestamp

            var toNeighborTxParametersDecrypted = new byte[remoteRegisterSynAck.ToNeighborTxParametersEncrypted.Length];
            cryptoLibrary.ProcessSingleAesBlock(false, aesKey, iv, remoteRegisterSynAck.ToNeighborTxParametersEncrypted, toNeighborTxParametersDecrypted);

            // parse toNeighborTxParametersDecrypted
            using (var reader = new BinaryReader(new MemoryStream(toNeighborTxParametersDecrypted)))
            {
                r.RemoteEndpoint = PacketProcedures.DecodeIPEndPointIpv4(reader);
                r.RemotePeerToken32 = P2pConnectionToken32.Decode(reader);
                var magic16 = reader.ReadUInt16();
                if (magic16 != Magic16_ipv4_responderToRequester) throw new BrokenCipherException();
            }
            
            return r;
        }
        const ushort Magic16_ipv4_responderToRequester = 0x60C1; // is used to validate decrypted data
        public static P2pStreamParameters DecryptAtRegisterResponder()
        {
            throw new NotImplementedException();
        }

        /// <summary>
        /// when sending ACK
        /// </summary>
        public static byte[] EncryptAtRegisterRequester(byte[] localPrivateEcdhKey, 
            RegisterSynPacket localRegisterSyn, RegisterSynAckPacket remoteRegisterSynAck, RegisterAckPacket localRegisterAckPacket, 
            P2pStreamParameters localRxParameters, ICryptoLibrary cryptoLibrary)
        {
            if ((remoteRegisterSynAck.Flags & RegisterSynAckPacket.Flag_ipv6) != 0) throw new NotImplementedException();

            var r = new P2pStreamParameters();

            var sharedDhSecret = cryptoLibrary.DeriveEcdh25519SharedSecret(localPrivateEcdhKey, remoteRegisterSynAck.NeighborEcdhePublicKey.ecdh25519PublicKey);

            var ms = new MemoryStream();
            using (var writer = new BinaryWriter(ms))
            {
                localRegisterSyn.GetCommonRequesterAndResponderFields(writer, true);
                remoteRegisterSynAck.GetCommonRequesterAndResponderFields(writer, true, true);
                localRegisterAckPacket.GetCommonRequesterAndResponderFields(writer, false, false);
            }
            var iv = cryptoLibrary.GetHashSHA256(ms.ToArray());

            ms.Write(sharedDhSecret, 0, sharedDhSecret.Length);
            var aesKey = cryptoLibrary.GetHashSHA256(ms.ToArray()); // here SHA256 is used as KDF, together with common fields from packets, including both ECDH public keys and timestamp

            // encode localRxParameters
            PacketProcedures.CreateBinaryWriter(out var msRxParameters, out var wRxParameters);
            PacketProcedures.EncodeIPEndPointIpv4(wRxParameters, localRxParameters.RemoteEndpoint); // 6
            localRxParameters.RemotePeerToken32.Encode(wRxParameters); // 4
            wRxParameters.Write(Magic16_ipv4_requesterToResponder);    // 2
            wRxParameters.Write(cryptoLibrary.GetRandomBytes(4));      // 4
            
            var localRxParametersDecrypted = msRxParameters.ToArray(); // total 16 bytes
            var localRxParametersEncrypted = new byte[localRxParametersDecrypted.Length];
            cryptoLibrary.ProcessSingleAesBlock(true, aesKey, iv, localRxParametersDecrypted, localRxParametersEncrypted);
            
            return localRxParametersEncrypted;
        }
        const ushort Magic16_ipv4_requesterToResponder = 0xBFA4; // is used to validate decrypted data
        

     //   IAuthenticatedEncryptor Encryptor;
     //   IAuthenticatedDecryptor Decryptor;
        byte[] SharedAuthKeyForHMAC; //  this key is shared secret, known only at requester (A) and neighbor (N), it is used for HMAC
        public void InitializeNeighborTxRxStreams(RegisterSynPacket registerSynPacket, RegisterSynAckPacket registerSynAckPacket, RegisterAckPacket registerAckPacket, ICryptoLibrary cryptoLibrary)
        {
            var ms = new MemoryStream();
            using (var writer = new BinaryWriter(ms))
            {
                registerSynPacket.GetCommonRequesterAndResponderFields(writer, true);
                registerSynAckPacket.GetCommonRequesterAndResponderFields(writer, true, true);
                registerAckPacket.GetCommonRequesterAndResponderFields(writer, false, false);
            }
            var iv = cryptoLibrary.GetHashSHA256(ms.ToArray()); // todo use for encryption
              
            ms.Write(SharedDhSecret, 0, SharedDhSecret.Length);

            SharedAuthKeyForHMAC = cryptoLibrary.GetHashSHA256(ms.ToArray()); // here SHA256 is used as KDF, together with common fields from packets, including both ECDH public keys and timestamp

            //Encryptor = cryptoLibrary.CreateAesEncyptor(iv, aesKey);
            //Decryptor = cryptoLibrary.CreateAesDecyptor(iv, aesKey);
        }
        public HMAC GetSharedHmac(ICryptoLibrary cryptoLibrary, byte[] data)
        {
            if (SharedAuthKeyForHMAC == null) throw new InvalidOperationException();
            return new HMAC
            {
                hmacSha256 = cryptoLibrary.GetSha256HMAC(SharedAuthKeyForHMAC, data)
            };

        }
        public HMAC GetSharedHmac(ICryptoLibrary cryptoLibarary, Action<BinaryWriter> data)
        {
            PacketProcedures.CreateBinaryWriter(out var ms, out var w);
            data(w);
            return GetSharedHmac(cryptoLibarary, ms.ToArray());
        }
    }
}
